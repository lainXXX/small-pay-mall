# 全局配置块
# 设置Nginx的工作进程数量，通常设置为CPU核心数的1-2倍，或使用auto自动检测
worker_processes auto;

# 事件配置块
events {
    # 设置每个工作进程的最大连接数，受限于系统的文件描述符限制（ulimit -n）
    worker_connections 2048;

    # 使用epoll事件模型（适用于Linux系统，提升性能）
    use epoll;

    # 开启多连接接受模式，提升并发性能
    multi_accept on;
}

# HTTP配置块
http {
    # 引入MIME类型配置文件，定义文件扩展名与MIME类型的映射关系
    include mime.types;

    # 设置默认的MIME类型，当Nginx无法识别文件类型时使用
    default_type application/octet-stream;

    # 定义日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    # 设置访问日志路径和使用的日志格式
    access_log /var/log/nginx/access.log main;

    # 启用sendfile系统调用，提升静态文件传输性能
    sendfile on;

    # 与sendfile配合使用，优化数据包的发送效率
    tcp_nopush on;

    # 设置客户端与Nginx之间的长连接超时时间（单位：秒）
    keepalive_timeout 65;

    # 启用Gzip压缩，减少传输数据量
    gzip on;

    # 设置Gzip压缩级别（1-9），级别越高压缩率越高，但CPU消耗也越大
    gzip_comp_level 6;

    # 设置需要压缩的文件类型
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 配置WebSocket支持
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # 定义一组后端服务器，命名为backend
    upstream backend {
        # 使用最少连接策略
        least_conn;

        # 定义后端服务器列表
        server 192.168.1.2:8080 weight=3 max_fails=3 fail_timeout=30s;  # 服务器1，权重3
        server 192.168.1.3:8080 weight=2 max_fails=3 fail_timeout=30s;  # 服务器2，权重2
        server 192.168.1.4:8080 weight=1 max_fails=3 fail_timeout=30s;  # 服务器3，权重1

        # 保持长连接，减少TCP连接建立的开销
        keepalive 32;
    }

    # 定义一个HTTP服务器
    server {
        # 监听80端口
        listen 80;

        # 设置服务器名称（域名）
        server_name example.com;

        # 设置根目录
        root /usr/share/nginx/html;

        # 设置默认索引文件
        index index.html index.htm;

        # 定义URL路径匹配规则
        location / {
            # 将请求转发到backend服务器组
            proxy_pass http://backend;

            # 设置代理请求头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 启用WebSocket支持
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        # 定义静态文件路径
        location /static/ {
            # 设置静态文件目录
            alias /var/www/static/;

            # 设置静态文件缓存时间
            expires 30d;
        }

        # 定义错误页面
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            internal;
        }
    }

    # 定义另一个HTTP服务器（用于重定向HTTP到HTTPS）
    server {
        listen 80;
        server_name www.example.com;

        # 将所有HTTP请求重定向到HTTPS
        return 301 https://$host$request_uri;
    }

    # 定义HTTPS服务器
    server {
        # 监听443端口，启用SSL
        listen 443 ssl;

        # 设置服务器名称（域名）
        server_name example.com;

        # 设置SSL证书和私钥路径
        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;

        # 设置SSL协议版本
        ssl_protocols TLSv1.2 TLSv1.3;

        # 设置SSL加密套件
        ssl_ciphers HIGH:!aNULL:!MD5;

        # 启用SSL会话缓存，提升性能
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 定义URL路径匹配规则
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}